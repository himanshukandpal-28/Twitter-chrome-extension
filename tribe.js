/******/ (() => { // webpackBootstrap
  var __webpack_exports__ = {};
  /*!***********************!*\
    !*** ./src/tribe.js ***!
    \***********************/
  
  window.addEventListener('storage', async (e) => {
    console.log('LOCALSTORAGE CHSANGES XXX'); // this never fires after logging a user in.
    console.log('=== LOCALSTORAGE: e.key:', e.key);
    console.log('=== LOCALSTORAGE: e.newValue:', e.newValue);
  
    if (e.key === 'ttw_usage' && e.newValue !== usage) {
      usage = e.newValue;
      chrome.storage.sync.set({ 'ttw_usage': e.newValue });
      console.log('=== LOCALSTORAGE AFTER SAVING: usage', usage);
    }
  });

        
      
  chrome.storage.onChanged.addListener(function(changes, namespace) {
    console.log("changes received!", changes);
    console.log("changes received!", namespace);
  });

  // service-worker.ts
  function storageOnChanged(changes, namespace) {
    console.log('changes in LS', changes); // {key : { newValue: 'value' }}
  }
  // chrome.storage.sync.setAccessLevel({ accessLevel: 'TRUSTED_AND_UNTRUSTED_CONTEXTS' });
  chrome.storage.sync.onChanged.addListener(storageOnChanged);
  
  /******/ })()
  ;
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,